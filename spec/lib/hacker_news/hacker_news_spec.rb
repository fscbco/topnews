require 'spec_helper'
require_relative '../../../lib/services/hacker_news/hacker_news.rb'

describe HackerNews do
  let(:instance) { HackerNews.new }
  it 'exists' do
    instance
  end

  describe '#topstories' do
    it 'responds to #topstories' do
      expect(instance).to respond_to(:topstories)
    end

    it 'returns list of stories ids on success' do
      mock_topstories = [41247023,41248104,41247982,41245159,41247841,41241942,41230267,41250470,41247193,41247238,41247153,41236718,41246181,41246050,41248208,41248460,41246211,41246686,41244468,41235662,41247211,41240556,41247132,41244423,41224128,41244847,41222528,41248542,41245901,41250577,41250723,41248438,41247083,41227011,41248984,41250302,41222655,41247881,41249044,41249543,41226548,41227172,41249527,41249429,41220549,41219501,41231123,41238102,41248448,41228513,41248069,41249178,41236430,41248417,41235259,41246204,41232446,41222577,41244172,41240755,41200881,41234713,41222101,41237275,41234636,41249340,41239800,41242979,41212297,41239913,41202134,41231141,41227987,41248315,41233811,41199092,41212072,41210745,41243931,41222632,41232621,41206168,41207987,41249504,41215649,41243901,41249445,41241825,41248360,41235677,41243703,41228278,41236273,41249354,41235789,41244648,41234964,41235462,41207838,41227179,41235038,41227772,41249147,41247085,41236275,41234877,41240680,41245688,41224225,41224689,41246961,41226538,41226039,41230546,41212566,41248283,41238632,41230344,41239670,41245836,41228630,41245815,41224286,41220188,41213902,41235733,41248316,41230994,41230033,41241124,41241637,41198931,41231490,41234174,41237149,41227792,41215727,41232259,41221718,41209900,41218722,41237204,41247926,41248896,41248260,41236745,41223902,41249491,41244939,41227369,41243333,41247727,41237000,41221252,41243992,41211507,41228113,41247275,41226802,41221501,41242202,41248707,41244919,41223934,41239096,41215626,41233206,41244798,41229049,41224853,41240640,41221218,41229328,41239031,41241647,41227350,41199320,41222759,41248015,41224557,41249080,41202841,41218314,41247992,41208343,41214762,41227061,41246177,41220059,41241431,41245032,41245262,41243147,41240641,41239635,41248847,41234219,41228935,41243551,41224253,41233924,41215679,41212271,41208506,41212103,41242943,41215593,41216560,41246439,41241657,41247754,41211091,41219080,41245681,41217319,41244336,41215201,41224316,41237259,41245452,41219962,41245423,41245504,41211889,41217058,41214693,41213053,41214259,41229236,41219562,41217136,41243697,41241532,41238732,41228022,41204368,41213561,41209688,41218206,41237542,41242400,41240300,41208988,41224780,41234289,41208704,41236439,41213064,41217903,41239287,41243877,41204228,41211540,41207569,41232354,41213711,41227142,41229029,41237363,41248241,41230169,41218737,41237446,41232827,41213442,41214307,41199567,41217162,41239749,41246922,41241090,41206908,41207417,41215724,41212193,41211039,41239741,41217758,41241373,41207048,41235721,41203306,41209452,41245053,41240344,41246413,41207182,41214180,41242174,41218928,41223774,41224623,41239739,41241938,41207793,41234490,41206465,41237018,41240510,41248453,41246015,41235940,41209994,41202694,41242259,41242198,41231145,41230794,41238836,41215631,41204881,41219440,41209181,41203509,41215489,41203475,41239642,41220079,41239496,41203269,41220775,41221829,41233321,41233309,41240869,41211519,41218811,41220532,41240450,41245823,41214900,41213151,41239596,41205176,41218696,41225357,41235614,41239968,41211741,41212773,41229597,41238020,41213387,41237864,41209966,41219122,41223907,41225816,41220284,41228325,41232046,41200605,41221399,41213082,41219788,41233675,41240636,41226958,41229306,41238557,41241328,41240421,41212364,41215166,41213347,41242091,41212899,41218916,41226035,41238037,41219723,41217037,41231964,41198491,41213618,41239940,41207355,41239859,41232067,41223835,41207415,41226754,41241915,41219005,41238843,41238820,41246288,41224070,41238592,41218600,41205141,41241056,41229109,41229600,41203928,41203368,41224741,41227165,41227149,41226982,41240037,41240562,41248074,41198776,41212976,41201555,41226200,41220097,41236946,41225295,41225796,41234863,41201922,41239828,41231735,41202064,41239718,41206025,41239417,41229196,41205554,41223288,41228191,41238756,41235424,41203909,41235326,41205439,41223101,41235152,41217517,41235318,41204622,41242361,41228579,41234633,41207221,41221603,41205834,41214229,41212616,41198151,41219304,41230512,41231028,41240716,41204159,41240099,41236847,41248240,41246917,41220806,41217855,41225856,41218733,41206443,41214966,41208934,41220143,41230039,41212555,41229595,41237583,41237057,41203307,41219779,41242280,41228535,41232799,41210700,41215126,41245702,41247648,41227072,41217857,41203075,41245779,41207608,41237111,41219284,41206746,41219981,41213580,41206024,41235262,41231465,41228568,41228534,41228499,41204552,41231358,41218828,41218794,41208148,41240240,41203274,41224260,41203024,41233722,41215147]
      mock_reponse = double('response', code: '200', body: JSON.generate(mock_topstories))
      allow(Net::HTTP).to receive(:get_response).and_return(mock_reponse)

      topstories = instance.topstories
      expect(topstories).to be_a(Array)
      expect(topstories).to eq(mock_topstories)
      expect(topstories.count).to eq(mock_topstories.count)
    end

    it 'returns nil on error' do
      mock_reponse = double('response', code: '403', body: nil)
      allow(Net::HTTP).to receive(:get_response).and_return(mock_reponse)

      expect(instance.topstories).to be_nil
    end
  end

  describe '#item' do
    it 'responds to #item' do
      expect(instance).to respond_to(:item)
    end

    it 'returns item s details' do
      item_id = 41247023
      mock_item = {
        "id"=>41247023,
        "kids"=>[41247704, 41247268],
        "descendants"=>496,
        "title"=>"Show HN: If YouTube had actual channels",
        "url"=>"https://ytch.xyz",
        "type"=>"story",
        "score"=>2554,
        "time"=>1723648206,
        "by"=>"hadisafa"
      }
      mock_reponse = double('response', code: '200', body: JSON.generate(mock_item))
      allow(Net::HTTP).to receive(:get_response).and_return(mock_reponse)

      item = instance.item(item_id)
      expect(item).to be_a(Hash)
      expect(item).to have_key(:id)
      expect(item).to have_key("id")
      expect(item).to have_key(:title)
      expect(item).to have_key("title")
      expect(item).to have_key(:url)
      expect(item).to have_key("url")
    end

    it 'returns nil on error' do
      item_id = 41247023
      mock_reponse = double('response', code: '403', body: nil)
      allow(Net::HTTP).to receive(:get_response).and_return(mock_reponse)

      item = instance.item(item_id)
      expect(item).to be_nil
    end
  end
end
